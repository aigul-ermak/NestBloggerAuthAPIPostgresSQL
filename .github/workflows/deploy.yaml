name: CI/CD Deployment

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20  # Ensure this matches your project's Node.js version
          cache: 'yarn'

      # Step 3: Enable Corepack
      - name: Enable Corepack
        run: corepack enable

      # Step 4: Prepare and Activate the Correct Yarn Version
      - name: Use Specific Yarn Version
        run: corepack prepare yarn@4.4.0 --activate

      # Step 5: Verify Yarn Version
      - name: Check Yarn Version
        run: yarn --version

      # Step 6: Install dependencies and build
      - name: Install and build
        run: |
          yarn install --frozen-lockfile
          yarn build
              

      # Step 6: Deploy to the server
      - name: Deploy to server
        env:
          DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          PROD_POSTGRES_DB: ${{ secrets.PROD_POSTGRES_DB }}
          PROD_POSTGRES_USER: ${{ secrets.PROD_POSTGRES_USER }}
          PROD_POSTGRES_PASSWORD: ${{ secrets.PROD_POSTGRES_PASSWORD }}
        run: |
          echo "${DEPLOY_TOKEN}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
          scp -r ./dist ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/var/www/nest-app
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << EOF
            cd /var/www/nest-app
            echo "DATABASE_URL=postgresql://${{ secrets.PROD_POSTGRES_USER }}:${{ secrets.PROD_POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.PROD_POSTGRES_DB }}" > .env
            docker-compose down
            docker-compose up -d --build
          EOF
